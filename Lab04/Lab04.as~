.text
.align 2

.global _start
@Display stuff
.set BLUE, 0x7C00
.set GREEN, 0x03E0
.set RED, 0x001F
.set BLACK, 0x0000
.set WHITE, 0xFFFF

.set VRAM, 0x06000000

@Button Stuff!
.set REG_KEYINPUT, 0x04000130
.set BTN_A, 0x01
.set BTN_B, 0x02
.set BTN_UP, 0x40
.set BTN_DWN, 0x80
.set BTN_LFT, 0x20
.set BTN_RGT, 0x10

.set REG_DISPCNT, 0x04000000
.set REG_DISPSTAT, 0x04000004
.set SCREEN0, 0x06000000
.set SCREEN1, 0x0600A000
.set MODE_3, 0x3
.set MODE_5, 0x5
.set BG2, 0x400
.set REG_DMA3SAD, 0x040000D4
.set REG_DMA3DAD, 0x040000D8
.set REG_DMA3CNT, 0x040000DC
.set REG_DMA3CNT_H, 0x040000DE
.set DST_INC, 0x00 << 5
.set DST_DEC, 0x01 << 5
.set DST_FIX, 0x10 << 5
.set SRC_INC, 0x00 << 7
.set SRC_DEC, 0x01 << 7
.set SRC_FIX, 0x10 << 7
.set DMA_16, 0x0 << 10
.set DMA_32, 0x1 << 10
.set DMA_START_NOW, 0x00 << 12
.set DMA_ENABLE, 0x1 << 15

@ timer registers
.set REG_TM0D, 0x04000100
.set REG_TM1D, 0x04000104
.set REG_TM2D, 0x04000108
.set REG_TM3D, 0x0400010C

.set REG_TM0CNT, 0x04000102
.set REG_TM1CNT, 0x04000106
.set REG_TM2CNT, 0x0400010A
.set REG_TM3CNT, 0x0400010E

.set DIV_1, 0x0
.set DIV_64, 0x1
.set DIV_256, 0x2
.set DIV_1024, 0x3
.set CASCADE, 0x4
.set ENABLE, 0x80


.set PDL_OLD_X, 10
.set PDL_OLD_X_OFFSET, 12

.set PDL_OLD_Y, 120
.set PDL_OLD_Y_OFFSET, 16

.set PDL_Y, 120
.set PDL_Y_OFFSET, 20

.set PDL_X, 10
.set PDL_X_OFFSET, 24

.set BALL_OLD_X, 10
.set BALL_OLD_X_OFFSET, 28

.set BALL_OLD_Y, 10
.set BALL_OLD_Y_OFFSET, 32

.set BALL_Y, 110
.set BALL_Y_OFFSET, 36

.set BALL_X, 110
.set BALL_X_OFFSET, 40

.set PDL_DIR, 0
.set PDL_DIR_OFFSET,  44

.set BALL_DIR, 0
.set BALL_DIR_OFFSET, 48

.set code_length, end - main_loop

_start:
	bl init_video
	bl init_timers
	
	@PUTTING ALL THE INITIAL VALUES ONTO THE STACK.
	sub r13, r13, #360	
	
	mov r0, #PDL_OLD_Y
	str r0, [r13, #PDL_OLD_Y_OFFSET]
	
	mov r0, #PDL_OLD_X
	str r0, [r13, #PDL_OLD_X_OFFSET]
	
	mov r0, #PDL_Y
	str r0, [r13, #PDL_OLD_X_OFFSET]
	
	mov r0, #PDL_X
	str r0, [r13, #PDL_X_OFFSET]
	
	MOV R0, #110
	STR R0, [R13, #40]
	
	MOV R0, #110
	STR R0, [R13, #36]
	
	MOV R0, #BALL_OLD_Y
	STR R0, [R13, #BALL_OLD_Y_OFFSET]
	
	MOV R0, #BALL_OLD_X
	STR R0, [R13, #BALL_OLD_X_OFFSET]
	
	MOV R0, #PDL_DIR
	STR R0, [R13, #PDL_DIR_OFFSET]
	
	MOV R0, #BALL_DIR
	STR R0, [R13, #BALL_DIR_OFFSET]
		
	
@	bl move_code_to_iwram
	
@	ldr r15, =IWRAM
	
	@ setup startTime and stopTime variables
	@sub r13, r13, #8
	
	@bl tick
	@str r0, [r13, #4]
	
	b main_loop
	
	
move_code_to_iwram:
	stmfd r13!, {r0, r14}
	
	ldr r0, =REG_DMA3DAD
	ldr r1, =IWRAM
	str r1, [r0]
	
	ldr r0, =REG_DMA3SAD
	adr r1, main_loop
	str r1, [r0]
	
	ldr r0, =REG_DMA3CNT_L
	ldr r1, =code_length
	strh r1, [r0]
	
	ldr r0, =REG_DMA3CNT_H
	ldr r1, =DST_INC | SRC_INC | DMA_32 | DMA_START_NOW | DMA_ENABLE
	strh r1, [r0]
	
	ldmfd r13!, {r0, r14}
	mov r15, r14
	
main_loop:
@	bl tick	
@	@ set startTime
@	str r0, [r13, #4]

@	@key input for moving paddle left and right.
@	ldr r1, =REG_KEYINPUT
@	ldrh r2, [r0]		
	
@	@store the direction into RAM
@	ands r3, r1, #BTN_RGT		@RIGHT
@	@set direction on stack  1 FOR RIGHT
@	MOV R0, #1
@	STR R0, [R13, #PDL_DIR_OFFSET]
@	@bl move_paddle		
@	
@	ands r3, r1, #BTN_LFT		@LEFT
@	@set direction on stack 2 FOR LEFT
@	MOV R0, #2
@	STR R0, [R13, #PDL_DIR_OFFSET]
	
	
@	bl move_paddle
	
@	@SET PADDLE DIRECTION TO 0 FOR NOT MOVING
@	MOV R0, #0
@	STR R0, [R13, #PDL_DIR_OFFSET]
	

	bl draw_paddle

	bl draw_ball		
	
	bl tick
	
	ldr r1, [r13, #4]
	sub r0, r0, r1	
	
	ldr r0, =20000
	
	imsomeroutine_loop:
		subs r0, r0, #1
		bne imsomeroutine_loop
	
	b main_loop

draw_pixel:

	@ R0 - pixel value
	STMFD r13!, {r0-r11, r14}
	
	@width
	MOV R10, #240
	@will use later...
	MOV R11, #2
	
	@multiply the Y position by the width and store it in R2
	MUL r2, r8, R10
	
	@Adding the x value to it.
	add r2, r2, R7
	
	@multiplying by 2 (store in R11)
	MUL r3, r2, R11
	
	@putting the color into the VRAM plus the offset for the pixel position
	strh r9, [r12, r3]
	
	LDMFD r13!, {r0-r11, r14}
	mov r15, r14
	
move_paddle:
	
	STMFD r13!, {r0-r11, r14}

	@load direction from RAM
	ldr r0, [r13, #PDL_DIR_OFFSET]
	
	@load X & Y position from RAM
	ldr R1, [R13, #PDL_X_OFFSET]
	ldr R2, [R13, #PDL_Y_OFFSET]
	
	@check to make sure the X value is greater than 0 and less than 
	@ 240 - paddle width.
	
	@1 IS RIGHT, 2 IS LEFT
	CMP R0, #1
	CMPEQ R1, #215
	ADDLT R3, R1, #1
	CMPNE R1, #0
	SUBLT R3, #1

	@STORE VALUES BACK INTO RAM
	
	STR R3, [R13, #PDL_X_OFFSET]
	STR R1, [R13, #PDL_OLD_X_OFFSET]
	
	LDMFD r13!, {r0-r11, r14}
	mov r15, r14
	

draw_ball:	
	STMFD r13!, {r0-r11, r14}
	bl move_ball
	bl clear_ball
	
	
	@get the values of the ball X and Y position from RAM
	@R7 R8 R9
	@ X  Y  COLOR
	ldrh R7, [R13, #32]
	ldrh R8, [R13, #36]
	@mov r7, #20
	@mov r8, #20
	ldr R9, =WHITE
	
	bl draw_pixel
	@the ball is just a pixel :)
	

	LDMFD r13!, {r0-R11, r14}
	mov r15, r14

move_ball:
	STMFD r13!, {r0-R11, r14}

	@X AND Y POSITIONS OF THE BALL.
	LDR R1, [R13, #BALL_X_OFFSET]
	LDR R2, [R13, #BALL_Y_OFFSET]
	
	@LOADING CURRENT POSITION AS OLD POSITION
	@BECAUSE BALL POSITION WILL BE UPDATED.
	STR R1, [R13, #BALL_OLD_X_OFFSET]
	STR R2, [R13, #BALL_OLD_Y_OFFSET]
	
	@PADDLE X AND Y POSITIONS
	LDR R4, [R13, #PDL_X_OFFSET]
	LDR R5, [R13, #PDL_Y_OFFSET]
	
	MOV R6, #25
	ADD R6, R6, R4
	
	@DIRECTION OF BALL
	LDR R3, [R13, #BALL_DIR_OFFSET]
	
	CMP R3, #0	@DOWN_RIGHT
		CMPEQ R1, #239
			MOVEQ R3, #3
			ADDLT R1, R1,  #1
		CMPEQ R2, #159
			BLEQ game_over
			ADDLT R2, R2,  #1
		CMPEQ R2, R5
			CMPEQ R1, R4
				CMPGT R1, R6
					MOVLT R3, #1		
	CMP R3, #1	@UP_RIGHT
		CMPEQ R1, #239
			MOVEQ R3, #2
			ADDLT R1, R1, #1
		CMPEQ R2, #1
			MOVEQ R3, #0
			SUBGT R2, R2, #1
			
		
	CMP R3, #2	@UP_LEFT
		CMPEQ R1, #1
			MOVEQ R3, #1
			SUBGT R1, R1, #1
		CMPEQ R2, #1
			MOVEQ R3, #3
			SUBGT R2, R2, #1
		
	CMP R3, #3	@DOWN_LEFT
		CMPEQ R1, #1
			MOVEQ R3, #0
			SUBGT R1, R1, #1
		CMPEQ R2, #159
			BLEQ game_over
			ADDLT R2, R2, #1
		CMPEQ R2, R5
			CMPEQ R1, R4
				CMPGT R1, R6
					MOVLT R3, #2
		
	STR R1, [R13, #BALL_X_OFFSET]
	STR R2, [R13, #BALL_Y_OFFSET]
	
	LDMFD r13!, {r0-R11, r14}
	mov r15, r14	
		
draw_paddle:	
	
	@this is where we draw the paddle!
	STMFD r13!, {r0-r11, r14}
	
@	bl clear_paddle
	
	MOV R2, #1
	
	@X position into R7
	ldr R7, [R13, #24]
	@Y position into R8
	LDR R8, [R13, #20]
	@Color into R9
	LDR R9, =BLUE
	@Width into R10
	@25
	MOV R10, #25
	@Height into R11
	@3
	MOV R11, #3
	
@	make_square:
		bl draw_line
@		ADD R2, #1
@		ADD R8, #1		
@		CMP R2, R11		
@		BNE make_square
		
	
	LDMFD r13!, {r0-r11, r14}
	mov r15, r14
	
draw_line:

	STMFD r13!, {r0-r11, r14}

	
	MOV R2, #0
	line_loop:		
		bl draw_pixel	
		ADD R2, #1
		ADD R7, #1
		CMP R2, R10
		BLT line_loop
	
	LDMFD r13!, {r0-r11, r14}
	mov r15, r14

	
clear_ball:
	@ R0 - pixel value
	STMFD r13!, {r0-r11, r14}	
	
	@Load old X value from RAM into R7
	LDR R7, [R13, #BALL_OLD_X_OFFSET]
	LDR R8, [R13, #BALL_OLD_Y_OFFSET]
	LDR R9, =BLACK
	
	BL draw_pixel
	
	LDMFD r13!, {r0-r11, r14}
	mov r15, r14


clear_paddle:
	@this is where we clear the paddle!
	STMFD r13!, {r0-r11, r14}
	
	MOV R2, #0
	
	@load OLD X position into R7 from RAM
	
	@load OLD Y position into R8 from RAM
	
	@Color into R9
	LDR R9, =BLACK
	@Width into R10
	
	@Height into R11
	
	
	unmake_square:
		bl draw_line
		ADD R2, #1
		ADD R8, #1		
		CMP R2, R11		
		BNE unmake_square
		
	
	LDMFD r13!, {r0-r11, r14}
	mov r15, r14



	
game_over:

	b game_over
	
	



init_video:
	stmfd r13!, {r0-r1, r14}
	
	ldr r0, =REG_DISPCNT
	ldr r1, =MODE_3 | BG2
	strh r1, [r0]
	LDR R12, =VRAM
	
	ldmfd r13!, {r0-r1, r14}
	mov r15, r14

init_timers:
	@ parameters: none
	@ returns: nothing
	
	
	stmfd r13!, {r0-r1, r14}
	
	@ load zero into timer 2's data registers
	eor r0, r0
	ldr r1, =REG_TM2D
	strh r0, [r1]
	
	@ load timer 1's data register to overflow into timer 2 after 64 seconds
	@ timer 0 will overflow every 1ms, 65536 - 64000 = 1536, 64000 * 0.001 = 64
	ldr r0, =1536
	ldr r1, =REG_TM1D
	strh r0, [r1]
	
	@ load timer 0's data register to overflow into timer 1's data register
	@ after 16780 ticks (65536 - 16780 = 48756, overflows every 1 millisecond)
	ldr r0, =48756
	ldr r1, =REG_TM0D
	strh r0, [r1]
	
	@ set timers 1 and 2 to cascade mode
	ldr r0, =ENABLE | CASCADE
	ldr r1, =REG_TM2CNT
	strh r0, [r1]
	ldr r1, =REG_TM1CNT
	strh r0, [r1]
	
	@ set timer 0 to count with a divider of 1
	ldr r0, =ENABLE | DIV_1
	ldr r1, =REG_TM0CNT
	strh r0, [r1]
	
	ldmfd r13!, {r0-r1, r14}
	mov r15, r14

end:
	
.end



